# -*- coding: utf-8 -*-
"""ML Project CNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m4edkdIMHpw2E7i6u0-iUIWO_p5us8_f
"""

from google.colab import drive
drive.mount('/content/drive')

# Install necessary libraries
!pip install tensorflow==2.12.0
!pip install opencv-python
!pip install split-folders==0.5.1

# Import libraries
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import numpy as np
import cv2
import os
import splitfolders

#--- Data splitting using splitfolders--
# Input and output folder paths
input_folder = '/content/drive/MyDrive/Classroom/CSE 432 - Machine Learning Lab 7A/Project/Dataset' # Path to original Dataset folder
output_folder = '/content/drive/MyDrive/Classroom/CSE 432 - Machine Learning Lab 7A/Project/Testing' # Path for split folders
# Split the dataset
splitfolders.ratio(input_folder, output=output_folder, seed=1337, ratio=(.8, 0.1, 0.1))
# --- End of data splitting--

# Set up data directories using the split folders
train_dir = os.path.join(output_folder, 'train')
val_dir = os.path.join(output_folder, 'val')
test_dir = os.path.join(output_folder, 'test')

# Data preprocessing and augmentation
train_datagen = ImageDataGenerator(
rescale=1./255,
shear_range=0.2,
zoom_range=0.2,
horizontal_flip=True
)
val_datagen = ImageDataGenerator(rescale=1./255)
train_generator = train_datagen.flow_from_directory(
train_dir,
target_size=(128, 128),
batch_size=32,
class_mode='categorical'
)
val_generator = val_datagen.flow_from_directory(
val_dir,
target_size=(128, 128),
batch_size=32,
class_mode='categorical'
)

# Define the CNN model
model = keras.Sequential([
keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(128, 128, 3)),
keras.layers.MaxPooling2D((2, 2)),
keras.layers.Conv2D(64, (3, 3), activation='relu'),
keras.layers.MaxPooling2D((2, 2)),
keras.layers.Flatten(),
keras.layers.Dense(128, activation='relu'),
keras.layers.Dense(train_generator.num_classes, activation='softmax')
])

# Compile the model
model.compile(optimizer='adam',
loss='categorical_crossentropy',
metrics=['accuracy'])

# Train the model
model.fit(
train_generator,
steps_per_epoch=train_generator.samples // train_generator.batch_size,
epochs=10,
validation_data=val_generator,
validation_steps=val_generator.samples // val_generator.batch_size
)

# Save the model (optional)
model.save('vehicle_classifier.h5')
# Evaluate the model on the test set
test_datagen = ImageDataGenerator(rescale=1./255)
test_generator = test_datagen.flow_from_directory(
test_dir,
target_size=(128, 128),
batch_size=32,
class_mode='categorical',
shuffle=False
)
loss, accuracy = model.evaluate(test_generator)
print('Test accuracy:', accuracy)

import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing import image

def classify_vehicle_and_display(img_path):
  # Load and preprocess image
  img = image.load_img(img_path, target_size=(128, 128))
  img_array = image.img_to_array(img)
  img_array = np.expand_dims(img_array, axis=0)
  img_array /= 255.
  # Make prediction
  prediction = model.predict(img_array)
  predicted_class_index = np.argmax(prediction)
  class_labels = list(train_generator.class_indices.keys())
  predicted_class = class_labels[predicted_class_index]
  # Display image and prediction
  plt.imshow(img)
  plt.title(f"Predicted Class: {predicted_class}")
  plt.axis('off') # Hide axes
  plt.show()

# Example usage
img_path = '/content/drive/MyDrive/Classroom/CSE 432 - Machine Learning Lab 7A/Project/Test Images/4.jpeg' # Path to test image
classify_vehicle_and_display(img_path)